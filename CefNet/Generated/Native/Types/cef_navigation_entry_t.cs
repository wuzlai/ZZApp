// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_navigation_entry_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to represent an entry in navigation history.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_navigation_entry_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if this object is valid. Do not call any other functions
		/// if this function returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsValid();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_url;

		/// <summary>
		/// Returns the actual URL of the page. For some pages this may be data: URL or
		/// similar. Use get_display_url() to return a display-friendly version.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_url")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetUrl();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_display_url;

		/// <summary>
		/// Returns a display-friendly version of the URL.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_display_url")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetDisplayUrl();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_original_url;

		/// <summary>
		/// Returns the original URL that was entered by the user before any redirects.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_original_url")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetOriginalUrl();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_title;

		/// <summary>
		/// Returns the title set by the page. This value may be NULL.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_title")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetTitle();

		/// <summary>
		/// cef_transition_type_t (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_transition_type;

		/// <summary>
		/// Returns the transition type which indicates what the user did to move to
		/// this page from the previous page.
		/// </summary>
		[NativeName("get_transition_type")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern CefTransitionType GetTransitionType();

		/// <summary>
		/// int (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* has_post_data;

		/// <summary>
		/// Returns true (1) if this navigation includes post data.
		/// </summary>
		[NativeName("has_post_data")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasPostData();

		/// <summary>
		/// cef_time_t (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_completion_time;

		/// <summary>
		/// Returns the time for the last known successful navigation completion. A
		/// navigation may be completed more than once if the page is reloaded. May be
		/// 0 if the navigation has not yet completed.
		/// </summary>
		[NativeName("get_completion_time")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_time_t GetCompletionTime();

		/// <summary>
		/// int (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_http_status_code;

		/// <summary>
		/// Returns the HTTP status code for the last known successful navigation
		/// response. May be 0 if the response has not yet been received or if the
		/// navigation has not yet completed.
		/// </summary>
		[NativeName("get_http_status_code")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int GetHttpStatusCode();

		/// <summary>
		/// _cef_sslstatus_t* (*)(_cef_navigation_entry_t* self)*
		/// </summary>
		public void* get_sslstatus;

		/// <summary>
		/// Returns the SSL information for this navigation entry.
		/// </summary>
		[NativeName("get_sslstatus")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_sslstatus_t* GetSslstatus();
	}
}

