// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_values_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure representing a dictionary value. Can be used on any process and
	/// thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_dictionary_value_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self)*
		/// </summary>
		public void* is_valid;

		/// <summary>
		/// Returns true (1) if this object is valid. This object may become invalid if
		/// the underlying data is owned by another object (e.g. list or dictionary)
		/// and that other object is then modified or destroyed. Do not call any other
		/// functions if this function returns false (0).
		/// </summary>
		[NativeName("is_valid")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsValid();

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self)*
		/// </summary>
		public void* is_owned;

		/// <summary>
		/// Returns true (1) if this object is currently owned by another object.
		/// </summary>
		[NativeName("is_owned")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsOwned();

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self)*
		/// </summary>
		public void* is_read_only;

		/// <summary>
		/// Returns true (1) if the values of this object are read-only. Some APIs may
		/// expose read-only objects.
		/// </summary>
		[NativeName("is_read_only")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsReadOnly();

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, _cef_dictionary_value_t* that)*
		/// </summary>
		public void* is_same;

		/// <summary>
		/// Returns true (1) if this object and |that| object have the same underlying
		/// data. If true (1) modifications to this object will also affect |that|
		/// object and vice-versa.
		/// </summary>
		[NativeName("is_same")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsSame(cef_dictionary_value_t* that);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, _cef_dictionary_value_t* that)*
		/// </summary>
		public void* is_equal;

		/// <summary>
		/// Returns true (1) if this object and |that| object have an equivalent
		/// underlying value but are not necessarily the same object.
		/// </summary>
		[NativeName("is_equal")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsEqual(cef_dictionary_value_t* that);

		/// <summary>
		/// _cef_dictionary_value_t* (*)(_cef_dictionary_value_t* self, int exclude_empty_children)*
		/// </summary>
		public void* copy;

		/// <summary>
		/// Returns a writable copy of this object. If |exclude_NULL_children| is true
		/// (1) any NULL dictionaries or lists will be excluded from the copy.
		/// </summary>
		[NativeName("copy")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_dictionary_value_t* Copy(int exclude_empty_children);

		/// <summary>
		/// size_t (*)(_cef_dictionary_value_t* self)*
		/// </summary>
		public void* get_size;

		/// <summary>
		/// Returns the number of values.
		/// </summary>
		[NativeName("get_size")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern UIntPtr GetSize();

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self)*
		/// </summary>
		public void* clear;

		/// <summary>
		/// Removes all values. Returns true (1) on success.
		/// </summary>
		[NativeName("clear")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int Clear();

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* has_key;

		/// <summary>
		/// Returns true (1) if the current dictionary has a value for the given key.
		/// </summary>
		[NativeName("has_key")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasKey([Immutable]cef_string_t* key);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, cef_string_list_t keys)*
		/// </summary>
		public void* get_keys;

		/// <summary>
		/// Reads all keys for this dictionary into the specified vector.
		/// </summary>
		[NativeName("get_keys")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int GetKeys(cef_string_list_t keys);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* remove;

		/// <summary>
		/// Removes the value at the specified key. Returns true (1) is the value was
		/// removed successfully.
		/// </summary>
		[NativeName("remove")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int Remove([Immutable]cef_string_t* key);

		/// <summary>
		/// cef_value_type_t (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_type;

		/// <summary>
		/// Returns the value type for the specified key.
		/// </summary>
		[NativeName("get_type")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern CefValueType GetType([Immutable]cef_string_t* key);

		/// <summary>
		/// _cef_value_t* (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_value;

		/// <summary>
		/// Returns the value at the specified key. For simple types the returned value
		/// will copy existing data and modifications to the value will not modify this
		/// object. For complex types (binary, dictionary and list) the returned value
		/// will reference existing data and modifications to the value will modify
		/// this object.
		/// </summary>
		[NativeName("get_value")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_value_t* GetValue([Immutable]cef_string_t* key);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_bool;

		/// <summary>
		/// Returns the value at the specified key as type bool.
		/// </summary>
		[NativeName("get_bool")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int GetBool([Immutable]cef_string_t* key);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_int;

		/// <summary>
		/// Returns the value at the specified key as type int.
		/// </summary>
		[NativeName("get_int")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int GetInt([Immutable]cef_string_t* key);

		/// <summary>
		/// double (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_double;

		/// <summary>
		/// Returns the value at the specified key as type double.
		/// </summary>
		[NativeName("get_double")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern double GetDouble([Immutable]cef_string_t* key);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_string;

		/// <summary>
		/// Returns the value at the specified key as type string.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_string")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetString([Immutable]cef_string_t* key);

		/// <summary>
		/// _cef_binary_value_t* (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_binary;

		/// <summary>
		/// Returns the value at the specified key as type binary. The returned value
		/// will reference existing data.
		/// </summary>
		[NativeName("get_binary")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_binary_value_t* GetBinary([Immutable]cef_string_t* key);

		/// <summary>
		/// _cef_dictionary_value_t* (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_dictionary;

		/// <summary>
		/// Returns the value at the specified key as type dictionary. The returned
		/// value will reference existing data and modifications to the value will
		/// modify this object.
		/// </summary>
		[NativeName("get_dictionary")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_dictionary_value_t* GetDictionary([Immutable]cef_string_t* key);

		/// <summary>
		/// _cef_list_value_t* (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* get_list;

		/// <summary>
		/// Returns the value at the specified key as type list. The returned value
		/// will reference existing data and modifications to the value will modify
		/// this object.
		/// </summary>
		[NativeName("get_list")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_list_value_t* GetList([Immutable]cef_string_t* key);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, _cef_value_t* value)*
		/// </summary>
		public void* set_value;

		/// <summary>
		/// Sets the value at the specified key. Returns true (1) if the value was set
		/// successfully. If |value| represents simple data then the underlying data
		/// will be copied and modifications to |value| will not modify this object. If
		/// |value| represents complex data (binary, dictionary or list) then the
		/// underlying data will be referenced and modifications to |value| will modify
		/// this object.
		/// </summary>
		[NativeName("set_value")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetValue([Immutable]cef_string_t* key, cef_value_t* value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key)*
		/// </summary>
		public void* set_null;

		/// <summary>
		/// Sets the value at the specified key as type null. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_null")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetNull([Immutable]cef_string_t* key);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, int value)*
		/// </summary>
		public void* set_bool;

		/// <summary>
		/// Sets the value at the specified key as type bool. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_bool")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetBool([Immutable]cef_string_t* key, int value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, int value)*
		/// </summary>
		public void* set_int;

		/// <summary>
		/// Sets the value at the specified key as type int. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_int")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetInt([Immutable]cef_string_t* key, int value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, double value)*
		/// </summary>
		public void* set_double;

		/// <summary>
		/// Sets the value at the specified key as type double. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_double")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetDouble([Immutable]cef_string_t* key, double value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, const cef_string_t* value)*
		/// </summary>
		public void* set_string;

		/// <summary>
		/// Sets the value at the specified key as type string. Returns true (1) if the
		/// value was set successfully.
		/// </summary>
		[NativeName("set_string")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetString([Immutable]cef_string_t* key, [Immutable]cef_string_t* value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, _cef_binary_value_t* value)*
		/// </summary>
		public void* set_binary;

		/// <summary>
		/// Sets the value at the specified key as type binary. Returns true (1) if the
		/// value was set successfully. If |value| is currently owned by another object
		/// then the value will be copied and the |value| reference will not change.
		/// Otherwise, ownership will be transferred to this object and the |value|
		/// reference will be invalidated.
		/// </summary>
		[NativeName("set_binary")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetBinary([Immutable]cef_string_t* key, cef_binary_value_t* value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, _cef_dictionary_value_t* value)*
		/// </summary>
		public void* set_dictionary;

		/// <summary>
		/// Sets the value at the specified key as type dict. Returns true (1) if the
		/// value was set successfully. If |value| is currently owned by another object
		/// then the value will be copied and the |value| reference will not change.
		/// Otherwise, ownership will be transferred to this object and the |value|
		/// reference will be invalidated.
		/// </summary>
		[NativeName("set_dictionary")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetDictionary([Immutable]cef_string_t* key, cef_dictionary_value_t* value);

		/// <summary>
		/// int (*)(_cef_dictionary_value_t* self, const cef_string_t* key, _cef_list_value_t* value)*
		/// </summary>
		public void* set_list;

		/// <summary>
		/// Sets the value at the specified key as type list. Returns true (1) if the
		/// value was set successfully. If |value| is currently owned by another object
		/// then the value will be copied and the |value| reference will not change.
		/// Otherwise, ownership will be transferred to this object and the |value|
		/// reference will be invalidated.
		/// </summary>
		[NativeName("set_list")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetList([Immutable]cef_string_t* key, cef_list_value_t* value);
	}
}

