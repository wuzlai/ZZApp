// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_xml_reader_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure that supports the reading of XML data via the libxml streaming API.
	/// The functions of this structure should only be called on the thread that
	/// creates the object.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_xml_reader_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* move_to_next_node;

		/// <summary>
		/// Moves the cursor to the next node in the document. This function must be
		/// called at least once to set the current cursor position. Returns true (1)
		/// if the cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_next_node")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToNextNode();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* close;

		/// <summary>
		/// Close the document. This should be called directly to ensure that cleanup
		/// occurs on the correct thread.
		/// </summary>
		[NativeName("close")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int Close();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* has_error;

		/// <summary>
		/// Returns true (1) if an error has been reported by the XML parser.
		/// </summary>
		[NativeName("has_error")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasError();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_error;

		/// <summary>
		/// Returns the error string.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_error")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetError();

		/// <summary>
		/// cef_xml_node_type_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_type;

		/// <summary>
		/// Returns the node type.
		/// </summary>
		[NativeName("get_type")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern CefXmlNodeType GetCefType();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_depth;

		/// <summary>
		/// Returns the node depth. Depth starts at 0 for the root node.
		/// </summary>
		[NativeName("get_depth")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int GetDepth();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_local_name;

		/// <summary>
		/// Returns the local name. See http://www.w3.org/TR/REC-xml-names/#NT-
		/// LocalPart for additional details.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_local_name")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetLocalName();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_prefix;

		/// <summary>
		/// Returns the namespace prefix. See http://www.w3.org/TR/REC-xml-names/ for
		/// additional details.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_prefix")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetPrefix();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_qualified_name;

		/// <summary>
		/// Returns the qualified name, equal to (Prefix:)LocalName. See
		/// http://www.w3.org/TR/REC-xml-names/#ns-qualnames for additional details.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_qualified_name")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetQualifiedName();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_namespace_uri;

		/// <summary>
		/// Returns the URI defining the namespace associated with the node. See
		/// http://www.w3.org/TR/REC-xml-names/ for additional details.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_namespace_uri")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetNamespaceUri();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_base_uri;

		/// <summary>
		/// Returns the base URI of the node. See http://www.w3.org/TR/xmlbase/ for
		/// additional details.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_base_uri")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetBaseUri();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_xml_lang;

		/// <summary>
		/// Returns the xml:lang scope within which the node resides. See
		/// http://www.w3.org/TR/REC-xml/#sec-lang-tag for additional details.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_xml_lang")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetXmlLang();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* is_empty_element;

		/// <summary>
		/// Returns true (1) if the node represents an NULL element. &lt;a /&gt;is considered
		/// NULL but &lt;a&gt;&lt;/a&gt;is not.
		/// </summary>
		[NativeName("is_empty_element")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsEmptyElement();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* has_value;

		/// <summary>
		/// Returns true (1) if the node has a text value.
		/// </summary>
		[NativeName("has_value")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasValue();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_value;

		/// <summary>
		/// Returns the text value.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_value")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetValue();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* has_attributes;

		/// <summary>
		/// Returns true (1) if the node has attributes.
		/// </summary>
		[NativeName("has_attributes")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasAttributes();

		/// <summary>
		/// size_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_attribute_count;

		/// <summary>
		/// Returns the number of attributes.
		/// </summary>
		[NativeName("get_attribute_count")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern UIntPtr GetAttributeCount();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self, int index)*
		/// </summary>
		public void* get_attribute_byindex;

		/// <summary>
		/// Returns the value of the attribute at the specified 0-based index.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_attribute_byindex")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetAttributeByIndex(int index);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self, const cef_string_t* qualifiedName)*
		/// </summary>
		public void* get_attribute_byqname;

		/// <summary>
		/// Returns the value of the attribute with the specified qualified name.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_attribute_byqname")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetAttributeByQName([Immutable]cef_string_t* qualifiedName);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self, const cef_string_t* localName, const cef_string_t* namespaceURI)*
		/// </summary>
		public void* get_attribute_bylname;

		/// <summary>
		/// Returns the value of the attribute with the specified local name and
		/// namespace URI.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_attribute_bylname")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetAttributeByLName([Immutable]cef_string_t* localName, [Immutable]cef_string_t* namespaceURI);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_inner_xml;

		/// <summary>
		/// Returns an XML representation of the current node&apos;s children.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_inner_xml")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetInnerXml();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_outer_xml;

		/// <summary>
		/// Returns an XML representation of the current node including its children.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_outer_xml")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetOuterXml();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* get_line_number;

		/// <summary>
		/// Returns the line number for the current node.
		/// </summary>
		[NativeName("get_line_number")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int GetLineNumber();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self, int index)*
		/// </summary>
		public void* move_to_attribute_byindex;

		/// <summary>
		/// Moves the cursor to the attribute at the specified 0-based index. Returns
		/// true (1) if the cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_attribute_byindex")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToAttributeByIndex(int index);

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self, const cef_string_t* qualifiedName)*
		/// </summary>
		public void* move_to_attribute_byqname;

		/// <summary>
		/// Moves the cursor to the attribute with the specified qualified name.
		/// Returns true (1) if the cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_attribute_byqname")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToAttributeByQName([Immutable]cef_string_t* qualifiedName);

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self, const cef_string_t* localName, const cef_string_t* namespaceURI)*
		/// </summary>
		public void* move_to_attribute_bylname;

		/// <summary>
		/// Moves the cursor to the attribute with the specified local name and
		/// namespace URI. Returns true (1) if the cursor position was set
		/// successfully.
		/// </summary>
		[NativeName("move_to_attribute_bylname")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToAttributeByLName([Immutable]cef_string_t* localName, [Immutable]cef_string_t* namespaceURI);

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* move_to_first_attribute;

		/// <summary>
		/// Moves the cursor to the first attribute in the current element. Returns
		/// true (1) if the cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_first_attribute")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToFirstAttribute();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* move_to_next_attribute;

		/// <summary>
		/// Moves the cursor to the next attribute in the current element. Returns true
		/// (1) if the cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_next_attribute")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToNextAttribute();

		/// <summary>
		/// int (*)(_cef_xml_reader_t* self)*
		/// </summary>
		public void* move_to_carrying_element;

		/// <summary>
		/// Moves the cursor back to the carrying element. Returns true (1) if the
		/// cursor position was set successfully.
		/// </summary>
		[NativeName("move_to_carrying_element")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int MoveToCarryingElement();
	}
}

