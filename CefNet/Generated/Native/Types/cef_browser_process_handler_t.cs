// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_browser_process_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to implement browser process callbacks. The functions of this
	/// structure will be called on the browser process main thread unless otherwise
	/// indicated.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_browser_process_handler_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self)*
		/// </summary>
		public void* on_context_initialized;

		/// <summary>
		/// Called on the browser process UI thread immediately after the CEF context
		/// has been initialized.
		/// </summary>
		[NativeName("on_context_initialized")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern void OnContextInitialized();

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self, _cef_command_line_t* command_line)*
		/// </summary>
		public void* on_before_child_process_launch;

		/// <summary>
		/// Called before a child process is launched. Will be called on the browser
		/// process UI thread when launching a render process and on the browser
		/// process IO thread when launching a GPU or plugin process. Provides an
		/// opportunity to modify the child process command line. Do not keep a
		/// reference to |command_line| outside of this function.
		/// </summary>
		[MethodImpl(MethodImplOptions.ForwardRef)]
		[NativeName("on_before_child_process_launch")]
		public unsafe extern void OnBeforeChildProcessLaunch(cef_command_line_t* command_line);

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self, _cef_list_value_t* extra_info)*
		/// </summary>
		public void* on_render_process_thread_created;

		/// <summary>
		/// Called on the browser process IO thread after the main thread has been
		/// created for a new render process. Provides an opportunity to specify extra
		/// information that will be passed to
		/// cef_render_process_handler_t::on_render_thread_created() in the render
		/// process. Do not keep a reference to |extra_info| outside of this function.
		/// </summary>
		[MethodImpl(MethodImplOptions.ForwardRef)]
		[NativeName("on_render_process_thread_created")]
		public unsafe extern void OnRenderProcessThreadCreated(cef_list_value_t* extra_info);

		/// <summary>
		/// _cef_print_handler_t* (*)(_cef_browser_process_handler_t* self)*
		/// </summary>
		public void* get_print_handler;

		/// <summary>
		/// Return the handler for printing on Linux. If a print handler is not
		/// provided then printing will not be supported on the Linux platform.
		/// </summary>
		[NativeName("get_print_handler")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_print_handler_t* GetPrintHandler();

		/// <summary>
		/// void (*)(_cef_browser_process_handler_t* self, int64 delay_ms)*
		/// </summary>
		public void* on_schedule_message_pump_work;

		/// <summary>
		/// Called from any thread when work has been scheduled for the browser process
		/// main (UI) thread. This callback is used in combination with CefSettings.
		/// external_message_pump and cef_do_message_loop_work() in cases where the CEF
		/// message loop must be integrated into an existing application message loop
		/// (see additional comments and warnings on CefDoMessageLoopWork). This
		/// callback should schedule a cef_do_message_loop_work() call to happen on the
		/// main (UI) thread. |delay_ms| is the requested delay in milliseconds. If
		/// |delay_ms| is 
		/// &lt;
		/// = 0 then the call should happen reasonably soon. If
		/// |delay_ms| is &gt; 0 then the call should be scheduled to happen after the
		/// specified delay and any currently pending scheduled call should be
		/// cancelled.
		/// </summary>
		[MethodImpl(MethodImplOptions.ForwardRef)]
		[NativeName("on_schedule_message_pump_work")]
		public unsafe extern void OnScheduleMessagePumpWork(long delay_ms);
	}
}

