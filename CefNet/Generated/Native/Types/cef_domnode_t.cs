// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_dom_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;

namespace CefNet.CApi
{
	/// <summary>
	/// Structure used to represent a DOM node. The functions of this structure
	/// should only be called on the render process main thread.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public unsafe partial struct cef_domnode_t
	{
		/// <summary>
		/// Base structure.
		/// </summary>
		public cef_base_ref_counted_t @base;

		/// <summary>
		/// cef_dom_node_type_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_type;

		/// <summary>
		/// Returns the type for this node.
		/// </summary>
		[NativeName("get_type")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern CefDOMNodeType GetCefType();

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_text;

		/// <summary>
		/// Returns true (1) if this is a text node.
		/// </summary>
		[NativeName("is_text")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsText();

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_element;

		/// <summary>
		/// Returns true (1) if this is an element node.
		/// </summary>
		[NativeName("is_element")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsElement();

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_editable;

		/// <summary>
		/// Returns true (1) if this is an editable node.
		/// </summary>
		[NativeName("is_editable")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsEditable();

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* is_form_control_element;

		/// <summary>
		/// Returns true (1) if this is a form control element node.
		/// </summary>
		[NativeName("is_form_control_element")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsFormControlElement();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_form_control_element_type;

		/// <summary>
		/// Returns the type of this form control element node.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[MethodImpl(MethodImplOptions.ForwardRef)]
		[NativeName("get_form_control_element_type")]
		public unsafe extern cef_string_userfree_t GetFormControlElementType();

		/// <summary>
		/// int (*)(_cef_domnode_t* self, _cef_domnode_t* that)*
		/// </summary>
		public void* is_same;

		/// <summary>
		/// Returns true (1) if this object is pointing to the same handle as |that|
		/// object.
		/// </summary>
		[NativeName("is_same")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int IsSame(cef_domnode_t* that);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_name;

		/// <summary>
		/// Returns the name of this node.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_name")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetName();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_value;

		/// <summary>
		/// Returns the value of this node.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_value")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetValue();

		/// <summary>
		/// int (*)(_cef_domnode_t* self, const cef_string_t* value)*
		/// </summary>
		public void* set_value;

		/// <summary>
		/// Set the value of this node. Returns true (1) on success.
		/// </summary>
		[NativeName("set_value")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetValue([Immutable]cef_string_t* value);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_as_markup;

		/// <summary>
		/// Returns the contents of this node as markup.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_as_markup")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetAsMarkup();

		/// <summary>
		/// _cef_domdocument_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_document;

		/// <summary>
		/// Returns the document associated with this node.
		/// </summary>
		[NativeName("get_document")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_domdocument_t* GetDocument();

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_parent;

		/// <summary>
		/// Returns the parent node.
		/// </summary>
		[NativeName("get_parent")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_domnode_t* GetParent();

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_previous_sibling;

		/// <summary>
		/// Returns the previous sibling node.
		/// </summary>
		[NativeName("get_previous_sibling")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_domnode_t* GetPreviousSibling();

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_next_sibling;

		/// <summary>
		/// Returns the next sibling node.
		/// </summary>
		[NativeName("get_next_sibling")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_domnode_t* GetNextSibling();

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* has_children;

		/// <summary>
		/// Returns true (1) if this node has child nodes.
		/// </summary>
		[NativeName("has_children")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasChildren();

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_first_child;

		/// <summary>
		/// Return the first child node.
		/// </summary>
		[NativeName("get_first_child")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_domnode_t* GetFirstChild();

		/// <summary>
		/// _cef_domnode_t* (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_last_child;

		/// <summary>
		/// Returns the last child node.
		/// </summary>
		[NativeName("get_last_child")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_domnode_t* GetLastChild();

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_element_tag_name;

		/// <summary>
		/// Returns the tag name of this element.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_element_tag_name")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetElementTagName();

		/// <summary>
		/// int (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* has_element_attributes;

		/// <summary>
		/// Returns true (1) if this element has attributes.
		/// </summary>
		[NativeName("has_element_attributes")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasElementAttributes();

		/// <summary>
		/// int (*)(_cef_domnode_t* self, const cef_string_t* attrName)*
		/// </summary>
		public void* has_element_attribute;

		/// <summary>
		/// Returns true (1) if this element has an attribute named |attrName|.
		/// </summary>
		[NativeName("has_element_attribute")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int HasElementAttribute([Immutable]cef_string_t* attrName);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self, const cef_string_t* attrName)*
		/// </summary>
		public void* get_element_attribute;

		/// <summary>
		/// Returns the element attribute named |attrName|.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_element_attribute")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetElementAttribute([Immutable]cef_string_t* attrName);

		/// <summary>
		/// void (*)(_cef_domnode_t* self, cef_string_map_t attrMap)*
		/// </summary>
		public void* get_element_attributes;

		/// <summary>
		/// Returns a map of all element attributes.
		/// </summary>
		[NativeName("get_element_attributes")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern void GetElementAttributes(cef_string_map_t attrMap);

		/// <summary>
		/// int (*)(_cef_domnode_t* self, const cef_string_t* attrName, const cef_string_t* value)*
		/// </summary>
		public void* set_element_attribute;

		/// <summary>
		/// Set the value for the element attribute named |attrName|. Returns true (1)
		/// on success.
		/// </summary>
		[NativeName("set_element_attribute")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern int SetElementAttribute([Immutable]cef_string_t* attrName, [Immutable]cef_string_t* value);

		/// <summary>
		/// cef_string_userfree_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_element_inner_text;

		/// <summary>
		/// Returns the inner text of the element.
		/// The resulting string must be freed by calling cef_string_userfree_free().
		/// </summary>
		[NativeName("get_element_inner_text")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_string_userfree_t GetElementInnerText();

		/// <summary>
		/// cef_rect_t (*)(_cef_domnode_t* self)*
		/// </summary>
		public void* get_element_bounds;

		/// <summary>
		/// Returns the bounds of the element.
		/// </summary>
		[NativeName("get_element_bounds")]
		[MethodImpl(MethodImplOptions.ForwardRef)]
		public unsafe extern cef_rect_t GetElementBounds();
	}
}

