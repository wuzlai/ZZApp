// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_render_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_render_handler_t
	{
		// _cef_accessibility_handler_t* (*)(_cef_render_handler_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_accessibility_handler_t* GetAccessibilityHandler()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::get_accessibility_handler
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_accessibility_handler_t*(valuetype CefNet.CApi.cef_render_handler_t*)
			ret
		}

		// int (*)(_cef_render_handler_t* self, _cef_browser_t* browser, cef_rect_t* rect)*
		.method public hidebysig int32 GetRootScreenRect(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_rect_t* rect)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::get_root_screen_rect
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_rect_t*)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, cef_rect_t* rect)*
		.method public hidebysig void GetViewRect(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_rect_t* rect)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::get_view_rect
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_rect_t*)
			ret
		}

		// int (*)(_cef_render_handler_t* self, _cef_browser_t* browser, int viewX, int viewY, int* screenX, int* screenY)*
		.method public hidebysig int32 GetScreenPoint(valuetype CefNet.CApi.cef_browser_t* browser, int32 viewX, int32 viewY, int32* screenX, int32* screenY)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::get_screen_point
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, int32, int32, int32*, int32*)
			ret
		}

		// int (*)(_cef_render_handler_t* self, _cef_browser_t* browser, _cef_screen_info_t* screen_info)*
		.method public hidebysig int32 GetScreenInfo(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_screen_info_t* screen_info)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::get_screen_info
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_screen_info_t*)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, int show)*
		.method public hidebysig void OnPopupShow(valuetype CefNet.CApi.cef_browser_t* browser, int32 show)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_popup_show
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, int32)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, const cef_rect_t* rect)*
		.method public hidebysig void OnPopupSize(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_rect_t* rect)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_popup_size
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_rect_t*)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, cef_paint_element_type_t type, size_t dirtyRectsCount, const cef_rect_t* dirtyRects, const void* buffer, int width, int height)*
		.method public hidebysig void OnPaint(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CefPaintElementType 'type', native uint dirtyRectsCount, valuetype CefNet.CApi.cef_rect_t* dirtyRects, void* buffer, int32 width, int32 height)
		{
			.maxstack 9
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.s 7
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_paint
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CefPaintElementType, native uint, valuetype CefNet.CApi.cef_rect_t*, void*, int32, int32)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, cef_paint_element_type_t type, size_t dirtyRectsCount, const cef_rect_t* dirtyRects, void* shared_handle)*
		.method public hidebysig void OnAcceleratedPaint(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CefPaintElementType 'type', native uint dirtyRectsCount, valuetype CefNet.CApi.cef_rect_t* dirtyRects, void* shared_handle)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_accelerated_paint
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CefPaintElementType, native uint, valuetype CefNet.CApi.cef_rect_t*, void*)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, HCURSOR cursor, cef_cursor_type_t type, const const _cef_cursor_info_t* custom_cursor_info)*
		.method public hidebysig void OnCursorChange(valuetype CefNet.CApi.cef_browser_t* browser, native int cursor, valuetype CefNet.CefCursorType 'type', valuetype CefNet.CApi.cef_cursor_info_t* custom_cursor_info)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_cursor_change
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, native int, valuetype CefNet.CefCursorType, valuetype CefNet.CApi.cef_cursor_info_t*)
			ret
		}

		// int (*)(_cef_render_handler_t* self, _cef_browser_t* browser, _cef_drag_data_t* drag_data, cef_drag_operations_mask_t allowed_ops, int x, int y)*
		.method public hidebysig int32 StartDragging(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_drag_data_t* drag_data, valuetype CefNet.CefDragOperationsMask allowed_ops, int32 x, int32 y)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::start_dragging
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_drag_data_t*, valuetype CefNet.CefDragOperationsMask, int32, int32)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, cef_drag_operations_mask_t operation)*
		.method public hidebysig void UpdateDragCursor(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CefDragOperationsMask operation)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::update_drag_cursor
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CefDragOperationsMask)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, double x, double y)*
		.method public hidebysig void OnScrollOffsetChanged(valuetype CefNet.CApi.cef_browser_t* browser, float64 x, float64 y)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_scroll_offset_changed
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, float64, float64)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, const cef_range_t* selected_range, size_t character_boundsCount, const cef_rect_t* character_bounds)*
		.method public hidebysig void OnImeCompositionRangeChanged(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_range_t* selected_range, native uint character_boundsCount, valuetype CefNet.CApi.cef_rect_t* character_bounds)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_ime_composition_range_changed
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_range_t*, native uint, valuetype CefNet.CApi.cef_rect_t*)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, const cef_string_t* selected_text, const cef_range_t* selected_range)*
		.method public hidebysig void OnTextSelectionChanged(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_string_t* selected_text, valuetype CefNet.CApi.cef_range_t* selected_range)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_text_selection_changed
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_range_t*)
			ret
		}

		// void (*)(_cef_render_handler_t* self, _cef_browser_t* browser, cef_text_input_mode_t input_mode)*
		.method public hidebysig void OnVirtualKeyboardRequested(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CefTextInputMode input_mode)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_render_handler_t::on_virtual_keyboard_requested
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_render_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CefTextInputMode)
			ret
		}
	}
}

