// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_browser_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_browser_t
	{
		// _cef_browser_host_t* (*)(_cef_browser_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_browser_host_t* GetHost()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_host
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_browser_host_t*(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self)*
		.method public hidebysig int32 CanGoBack()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::can_go_back
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_browser_t* self)*
		.method public hidebysig void GoBack()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::go_back
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self)*
		.method public hidebysig int32 CanGoForward()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::can_go_forward
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_browser_t* self)*
		.method public hidebysig void GoForward()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::go_forward
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self)*
		.method public hidebysig int32 IsLoading()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::is_loading
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_browser_t* self)*
		.method public hidebysig void Reload()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::reload
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_browser_t* self)*
		.method public hidebysig void ReloadIgnoreCache()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::reload_ignore_cache
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_browser_t* self)*
		.method public hidebysig void StopLoad()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::stop_load
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self)*
		.method public hidebysig int32 GetIdentifier()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_identifier
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self, _cef_browser_t* that)*
		.method public hidebysig int32 IsSame(valuetype CefNet.CApi.cef_browser_t* that)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::is_same
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self)*
		.method public hidebysig int32 IsPopup()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::is_popup
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// int (*)(_cef_browser_t* self)*
		.method public hidebysig int32 HasDocument()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::has_document
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// _cef_frame_t* (*)(_cef_browser_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_frame_t* GetMainFrame()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_main_frame
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_frame_t*(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// _cef_frame_t* (*)(_cef_browser_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_frame_t* GetFocusedFrame()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_focused_frame
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_frame_t*(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// _cef_frame_t* (*)(_cef_browser_t* self, int64 identifier)*
		.method public hidebysig valuetype CefNet.CApi.cef_frame_t* GetFrameByIdent(int64 identifier)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_frame_byident
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_frame_t*(valuetype CefNet.CApi.cef_browser_t*, int64)
			ret
		}

		// _cef_frame_t* (*)(_cef_browser_t* self, const cef_string_t* name)*
		.method public hidebysig valuetype CefNet.CApi.cef_frame_t* GetFrame(valuetype CefNet.CApi.cef_string_t* name)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_frame
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_frame_t*(valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// size_t (*)(_cef_browser_t* self)*
		.method public hidebysig native uint GetFrameCount()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_frame_count
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native uint(valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_browser_t* self, size_t* identifiersCount, int64* identifiers)*
		.method public hidebysig void GetFrameIdentifiers(native uint* identifiersCount, int64* identifiers)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_frame_identifiers
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*, native uint*, int64*)
			ret
		}

		// void (*)(_cef_browser_t* self, cef_string_list_t names)*
		.method public hidebysig void GetFrameNames(valuetype CefNet.CApi.cef_string_list_t names)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_t::get_frame_names
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_string_list_t)
			ret
		}
	}
}

