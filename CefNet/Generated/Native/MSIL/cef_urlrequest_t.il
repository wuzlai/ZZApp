// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_urlrequest_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_urlrequest_t
	{
		// _cef_request_t* (*)(_cef_urlrequest_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_request_t* GetRequest()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::get_request
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_request_t*(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}

		// _cef_urlrequest_client_t* (*)(_cef_urlrequest_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_urlrequest_client_t* GetClient()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::get_client
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_urlrequest_client_t*(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}

		// cef_urlrequest_status_t (*)(_cef_urlrequest_t* self)*
		.method public hidebysig valuetype CefNet.CefUrlRequestStatus GetRequestStatus()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::get_request_status
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefUrlRequestStatus(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}

		// cef_errorcode_t (*)(_cef_urlrequest_t* self)*
		.method public hidebysig valuetype CefNet.CefErrorCode GetRequestError()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::get_request_error
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefErrorCode(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}

		// _cef_response_t* (*)(_cef_urlrequest_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_response_t* GetResponse()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::get_response
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_response_t*(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}

		// int (*)(_cef_urlrequest_t* self)*
		.method public hidebysig int32 ResponseWasCached()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::response_was_cached
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}

		// void (*)(_cef_urlrequest_t* self)*
		.method public hidebysig void Cancel()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_urlrequest_t::cancel
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_urlrequest_t*)
			ret
		}
	}
}

