// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_request_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_request_handler_t
	{
		// int (*)(_cef_request_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, _cef_request_t* request, int user_gesture, int is_redirect)*
		.method public hidebysig int32 OnBeforeBrowse(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_frame_t* frame, valuetype CefNet.CApi.cef_request_t* 'request', int32 user_gesture, int32 is_redirect)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_before_browse
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_frame_t*, valuetype CefNet.CApi.cef_request_t*, int32, int32)
			ret
		}

		// int (*)(_cef_request_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, const cef_string_t* target_url, cef_window_open_disposition_t target_disposition, int user_gesture)*
		.method public hidebysig int32 OnOpenUrlFromTab(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_frame_t* frame, valuetype CefNet.CApi.cef_string_t* target_url, valuetype CefNet.CefWindowOpenDisposition target_disposition, int32 user_gesture)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_open_urlfrom_tab
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_frame_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CefWindowOpenDisposition, int32)
			ret
		}

		// _cef_resource_request_handler_t* (*)(_cef_request_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, _cef_request_t* request, int is_navigation, int is_download, const cef_string_t* request_initiator, int* disable_default_handling)*
		.method public hidebysig valuetype CefNet.CApi.cef_resource_request_handler_t* GetResourceRequestHandler(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_frame_t* frame, valuetype CefNet.CApi.cef_request_t* 'request', int32 is_navigation, int32 is_download, valuetype CefNet.CApi.cef_string_t* request_initiator, int32* disable_default_handling)
		{
			.maxstack 9
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.s 7
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::get_resource_request_handler
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_resource_request_handler_t*(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_frame_t*, valuetype CefNet.CApi.cef_request_t*, int32, int32, valuetype CefNet.CApi.cef_string_t*, int32*)
			ret
		}

		// int (*)(_cef_request_handler_t* self, _cef_browser_t* browser, const cef_string_t* origin_url, int isProxy, const cef_string_t* host, int port, const cef_string_t* realm, const cef_string_t* scheme, _cef_auth_callback_t* callback)*
		.method public hidebysig int32 GetAuthCredentials(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_string_t* origin_url, int32 isProxy, valuetype CefNet.CApi.cef_string_t* host, int32 port, valuetype CefNet.CApi.cef_string_t* realm, valuetype CefNet.CApi.cef_string_t* scheme, valuetype CefNet.CApi.cef_auth_callback_t* callback)
		{
			.maxstack 10
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.s 7
			ldarg.s 8
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::get_auth_credentials
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_string_t*, int32, valuetype CefNet.CApi.cef_string_t*, int32, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_auth_callback_t*)
			ret
		}

		// int (*)(_cef_request_handler_t* self, _cef_browser_t* browser, const cef_string_t* origin_url, int64 new_size, _cef_request_callback_t* callback)*
		.method public hidebysig int32 OnQuotaRequest(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_string_t* origin_url, int64 new_size, valuetype CefNet.CApi.cef_request_callback_t* callback)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_quota_request
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_string_t*, int64, valuetype CefNet.CApi.cef_request_callback_t*)
			ret
		}

		// int (*)(_cef_request_handler_t* self, _cef_browser_t* browser, cef_errorcode_t cert_error, const cef_string_t* request_url, _cef_sslinfo_t* ssl_info, _cef_request_callback_t* callback)*
		.method public hidebysig int32 OnCertificateError(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CefErrorCode cert_error, valuetype CefNet.CApi.cef_string_t* request_url, valuetype CefNet.CApi.cef_sslinfo_t* ssl_info, valuetype CefNet.CApi.cef_request_callback_t* callback)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_certificate_error
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CefErrorCode, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_sslinfo_t*, valuetype CefNet.CApi.cef_request_callback_t*)
			ret
		}

		// int (*)(_cef_request_handler_t* self, _cef_browser_t* browser, int isProxy, const cef_string_t* host, int port, size_t certificatesCount, const _cef_x509certificate_t** certificates, _cef_select_client_certificate_callback_t* callback)*
		.method public hidebysig int32 OnSelectClientCertificate(valuetype CefNet.CApi.cef_browser_t* browser, int32 isProxy, valuetype CefNet.CApi.cef_string_t* host, int32 port, native uint certificatesCount, valuetype CefNet.CApi.cef_x509certificate_t** certificates, valuetype CefNet.CApi.cef_select_client_certificate_callback_t* callback)
		{
			.maxstack 9
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.s 7
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_select_client_certificate
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, int32, valuetype CefNet.CApi.cef_string_t*, int32, native uint, valuetype CefNet.CApi.cef_x509certificate_t**, valuetype CefNet.CApi.cef_select_client_certificate_callback_t*)
			ret
		}

		// void (*)(_cef_request_handler_t* self, _cef_browser_t* browser, const cef_string_t* plugin_path)*
		.method public hidebysig void OnPluginCrashed(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_string_t* plugin_path)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_plugin_crashed
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// void (*)(_cef_request_handler_t* self, _cef_browser_t* browser)*
		.method public hidebysig void OnRenderViewReady(valuetype CefNet.CApi.cef_browser_t* browser)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_render_view_ready
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*)
			ret
		}

		// void (*)(_cef_request_handler_t* self, _cef_browser_t* browser, cef_termination_status_t status)*
		.method public hidebysig void OnRenderProcessTerminated(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CefTerminationStatus status)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_render_process_terminated
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CefTerminationStatus)
			ret
		}

		// void (*)(_cef_request_handler_t* self, _cef_browser_t* browser)*
		.method public hidebysig void OnDocumentAvailableInMainFrame(valuetype CefNet.CApi.cef_browser_t* browser)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_handler_t::on_document_available_in_main_frame
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_handler_t*, valuetype CefNet.CApi.cef_browser_t*)
			ret
		}
	}
}

