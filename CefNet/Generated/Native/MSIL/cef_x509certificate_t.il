// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_x509_certificate_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_x509certificate_t
	{
		// _cef_x509cert_principal_t* (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_x509cert_principal_t* GetSubject()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_subject
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_x509cert_principal_t*(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// _cef_x509cert_principal_t* (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_x509cert_principal_t* GetIssuer()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_issuer
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_x509cert_principal_t*(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// _cef_binary_value_t* (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_binary_value_t* GetSerialNumber()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_serial_number
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_binary_value_t*(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// cef_time_t (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_time_t GetValidStart()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_valid_start
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_time_t(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// cef_time_t (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_time_t GetValidExpiry()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_valid_expiry
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_time_t(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// _cef_binary_value_t* (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_binary_value_t* GetDEREncoded()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_derencoded
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_binary_value_t*(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// _cef_binary_value_t* (*)(_cef_x509certificate_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_binary_value_t* GetPEMEncoded()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_pemencoded
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_binary_value_t*(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// size_t (*)(_cef_x509certificate_t* self)*
		.method public hidebysig native uint GetIssuerChainSize()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_issuer_chain_size
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native uint(valuetype CefNet.CApi.cef_x509certificate_t*)
			ret
		}

		// void (*)(_cef_x509certificate_t* self, size_t* chainCount, _cef_binary_value_t** chain)*
		.method public hidebysig void GetDEREncodedIssuerChain(native uint* chainCount, valuetype CefNet.CApi.cef_binary_value_t** chain)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_derencoded_issuer_chain
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_x509certificate_t*, native uint*, valuetype CefNet.CApi.cef_binary_value_t**)
			ret
		}

		// void (*)(_cef_x509certificate_t* self, size_t* chainCount, _cef_binary_value_t** chain)*
		.method public hidebysig void GetPEMEncodedIssuerChain(native uint* chainCount, valuetype CefNet.CApi.cef_binary_value_t** chain)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_x509certificate_t::get_pemencoded_issuer_chain
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_x509certificate_t*, native uint*, valuetype CefNet.CApi.cef_binary_value_t**)
			ret
		}
	}
}

