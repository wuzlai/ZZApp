// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_print_settings_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_print_settings_t
	{
		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 IsValid()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::is_valid
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 IsReadOnly()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::is_read_only
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, int landscape)*
		.method public hidebysig void SetOrientation(int32 landscape)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_orientation
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, int32)
			ret
		}

		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 IsLandscape()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::is_landscape
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, const cef_size_t* physical_size_device_units, const cef_rect_t* printable_area_device_units, int landscape_needs_flip)*
		.method public hidebysig void SetPrinterPrintableArea(valuetype CefNet.CApi.cef_size_t* physical_size_device_units, valuetype CefNet.CApi.cef_rect_t* printable_area_device_units, int32 landscape_needs_flip)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_printer_printable_area
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, valuetype CefNet.CApi.cef_size_t*, valuetype CefNet.CApi.cef_rect_t*, int32)
			ret
		}

		// void (*)(_cef_print_settings_t* self, const cef_string_t* name)*
		.method public hidebysig void SetDeviceName(valuetype CefNet.CApi.cef_string_t* name)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_device_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_print_settings_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetDeviceName()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_device_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, int dpi)*
		.method public hidebysig void SetDpi(int32 dpi)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_dpi
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, int32)
			ret
		}

		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 GetDpi()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_dpi
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, size_t rangesCount, const cef_range_t* ranges)*
		.method public hidebysig void SetPageRanges(native uint rangesCount, valuetype CefNet.CApi.cef_range_t* ranges)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_page_ranges
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, native uint, valuetype CefNet.CApi.cef_range_t*)
			ret
		}

		// size_t (*)(_cef_print_settings_t* self)*
		.method public hidebysig native uint GetPageRangesCount()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_page_ranges_count
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native uint(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, size_t* rangesCount, cef_range_t* ranges)*
		.method public hidebysig void GetPageRanges(native uint* rangesCount, valuetype CefNet.CApi.cef_range_t* ranges)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_page_ranges
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, native uint*, valuetype CefNet.CApi.cef_range_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, int selection_only)*
		.method public hidebysig void SetSelectionOnly(int32 selection_only)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_selection_only
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, int32)
			ret
		}

		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 IsSelectionOnly()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::is_selection_only
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, int collate)*
		.method public hidebysig void SetCollate(int32 collate)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_collate
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, int32)
			ret
		}

		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 WillCollate()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::will_collate
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, cef_color_model_t model)*
		.method public hidebysig void SetColorModel(valuetype CefNet.CefColorModel model)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_color_model
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, valuetype CefNet.CefColorModel)
			ret
		}

		// cef_color_model_t (*)(_cef_print_settings_t* self)*
		.method public hidebysig valuetype CefNet.CefColorModel GetColorModel()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_color_model
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefColorModel(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, int copies)*
		.method public hidebysig void SetCopies(int32 copies)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_copies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, int32)
			ret
		}

		// int (*)(_cef_print_settings_t* self)*
		.method public hidebysig int32 GetCopies()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_copies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}

		// void (*)(_cef_print_settings_t* self, cef_duplex_mode_t mode)*
		.method public hidebysig void SetDuplexMode(valuetype CefNet.CefDuplexMode mode)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::set_duplex_mode
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_print_settings_t*, valuetype CefNet.CefDuplexMode)
			ret
		}

		// cef_duplex_mode_t (*)(_cef_print_settings_t* self)*
		.method public hidebysig valuetype CefNet.CefDuplexMode GetDuplexMode()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_print_settings_t::get_duplex_mode
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefDuplexMode(valuetype CefNet.CApi.cef_print_settings_t*)
			ret
		}
	}
}

