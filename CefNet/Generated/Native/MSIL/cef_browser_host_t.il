// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_browser_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_browser_host_t
	{
		// _cef_browser_t* (*)(_cef_browser_host_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_browser_t* GetBrowser()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_browser
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_browser_t*(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int force_close)*
		.method public hidebysig void CloseBrowser(int32 force_close)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::close_browser
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 TryCloseBrowser()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::try_close_browser
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int focus)*
		.method public hidebysig void SetFocus(int32 focus)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_focus
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// HWND (*)(_cef_browser_host_t* self)*
		.method public hidebysig native int GetWindowHandle()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_window_handle
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native int(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// HWND (*)(_cef_browser_host_t* self)*
		.method public hidebysig native int GetOpenerWindowHandle()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_opener_window_handle
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native int(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 HasView()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::has_view
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// _cef_client_t* (*)(_cef_browser_host_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_client_t* GetClient()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_client
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_client_t*(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// _cef_request_context_t* (*)(_cef_browser_host_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_request_context_t* GetRequestContext()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_request_context
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_request_context_t*(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// double (*)(_cef_browser_host_t* self)*
		.method public hidebysig float64 GetZoomLevel()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_zoom_level
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				float64(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, double zoomLevel)*
		.method public hidebysig void SetZoomLevel(float64 zoomLevel)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_zoom_level
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, float64)
			ret
		}

		// void (*)(_cef_browser_host_t* self, cef_file_dialog_mode_t mode, const cef_string_t* title, const cef_string_t* default_file_path, cef_string_list_t accept_filters, int selected_accept_filter, _cef_run_file_dialog_callback_t* callback)*
		.method public hidebysig void RunFileDialog(valuetype CefNet.CefFileDialogMode mode, valuetype CefNet.CApi.cef_string_t* title, valuetype CefNet.CApi.cef_string_t* default_file_path, valuetype CefNet.CApi.cef_string_list_t accept_filters, int32 selected_accept_filter, valuetype CefNet.CApi.cef_run_file_dialog_callback_t* callback)
		{
			.maxstack 8
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::run_file_dialog
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CefFileDialogMode, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_list_t, int32, valuetype CefNet.CApi.cef_run_file_dialog_callback_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* url)*
		.method public hidebysig void StartDownload(valuetype CefNet.CApi.cef_string_t* url)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::start_download
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* image_url, int is_favicon, uint32 max_image_size, int bypass_cache, _cef_download_image_callback_t* callback)*
		.method public hidebysig void DownloadImage(valuetype CefNet.CApi.cef_string_t* image_url, int32 is_favicon, uint32 max_image_size, int32 bypass_cache, valuetype CefNet.CApi.cef_download_image_callback_t* callback)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::download_image
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*, int32, uint32, int32, valuetype CefNet.CApi.cef_download_image_callback_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void Print()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::print
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* path, const const _cef_pdf_print_settings_t* settings, _cef_pdf_print_callback_t* callback)*
		.method public hidebysig void PrintToPdf(valuetype CefNet.CApi.cef_string_t* path, valuetype CefNet.CApi.cef_pdf_print_settings_t* settings, valuetype CefNet.CApi.cef_pdf_print_callback_t* callback)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::print_to_pdf
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_pdf_print_settings_t*, valuetype CefNet.CApi.cef_pdf_print_callback_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int identifier, const cef_string_t* searchText, int forward, int matchCase, int findNext)*
		.method public hidebysig void Find(int32 identifier, valuetype CefNet.CApi.cef_string_t* searchText, int32 forward, int32 matchCase, int32 findNext)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::find
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32, valuetype CefNet.CApi.cef_string_t*, int32, int32, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int clearSelection)*
		.method public hidebysig void StopFinding(int32 clearSelection)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::stop_finding
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_window_info_t* windowInfo, _cef_client_t* client, const const _cef_browser_settings_t* settings, const cef_point_t* inspect_element_at)*
		.method public hidebysig void ShowDevTools(valuetype CefNet.CApi.cef_window_info_t* windowInfo, valuetype CefNet.CApi.cef_client_t* client, valuetype CefNet.CApi.cef_browser_settings_t* settings, valuetype CefNet.CApi.cef_point_t* inspect_element_at)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::show_dev_tools
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_window_info_t*, valuetype CefNet.CApi.cef_client_t*, valuetype CefNet.CApi.cef_browser_settings_t*, valuetype CefNet.CApi.cef_point_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void CloseDevTools()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::close_dev_tools
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 HasDevTools()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::has_dev_tools
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// int (*)(_cef_browser_host_t* self, const void* message, size_t message_size)*
		.method public hidebysig int32 SendDevToolsMessage(void* message, native uint message_size)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_dev_tools_message
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*, void*, native uint)
			ret
		}

		// int (*)(_cef_browser_host_t* self, int message_id, const cef_string_t* method, _cef_dictionary_value_t* params)*
		.method public hidebysig int32 ExecuteDevToolsMethod(int32 message_id, valuetype CefNet.CApi.cef_string_t* 'method', valuetype CefNet.CApi.cef_dictionary_value_t* @params)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::execute_dev_tools_method
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*, int32, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_dictionary_value_t*)
			ret
		}

		// _cef_registration_t* (*)(_cef_browser_host_t* self, _cef_dev_tools_message_observer_t* observer)*
		.method public hidebysig valuetype CefNet.CApi.cef_registration_t* AddDevToolsMessageObserver(valuetype CefNet.CApi.cef_dev_tools_message_observer_t* observer)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::add_dev_tools_message_observer
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_registration_t*(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_dev_tools_message_observer_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, _cef_navigation_entry_visitor_t* visitor, int current_only)*
		.method public hidebysig void GetNavigationEntries(valuetype CefNet.CApi.cef_navigation_entry_visitor_t* visitor, int32 current_only)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_navigation_entries
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_navigation_entry_visitor_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int disabled)*
		.method public hidebysig void SetMouseCursorChangeDisabled(int32 disabled)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_mouse_cursor_change_disabled
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 IsMouseCursorChangeDisabled()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::is_mouse_cursor_change_disabled
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* word)*
		.method public hidebysig void ReplaceMisspelling(valuetype CefNet.CApi.cef_string_t* word)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::replace_misspelling
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* word)*
		.method public hidebysig void AddWordToDictionary(valuetype CefNet.CApi.cef_string_t* word)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::add_word_to_dictionary
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 IsWindowRenderingDisabled()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::is_window_rendering_disabled
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void WasResized()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::was_resized
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int hidden)*
		.method public hidebysig void WasHidden(int32 hidden)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::was_hidden
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void NotifyScreenInfoChanged()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::notify_screen_info_changed
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, cef_paint_element_type_t type)*
		.method public hidebysig void Invalidate(valuetype CefNet.CefPaintElementType 'type')
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::invalidate
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CefPaintElementType)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void SendExternalBeginFrame()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_external_begin_frame
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_key_event_t* event)*
		.method public hidebysig void SendKeyEvent(valuetype CefNet.CApi.cef_key_event_t* @event)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_key_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_key_event_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_mouse_event_t* event, cef_mouse_button_type_t type, int mouseUp, int clickCount)*
		.method public hidebysig void SendMouseClickEvent(valuetype CefNet.CApi.cef_mouse_event_t* @event, valuetype CefNet.CefMouseButtonType 'type', int32 mouseUp, int32 clickCount)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_mouse_click_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_mouse_event_t*, valuetype CefNet.CefMouseButtonType, int32, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_mouse_event_t* event, int mouseLeave)*
		.method public hidebysig void SendMouseMoveEvent(valuetype CefNet.CApi.cef_mouse_event_t* @event, int32 mouseLeave)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_mouse_move_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_mouse_event_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_mouse_event_t* event, int deltaX, int deltaY)*
		.method public hidebysig void SendMouseWheelEvent(valuetype CefNet.CApi.cef_mouse_event_t* @event, int32 deltaX, int32 deltaY)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_mouse_wheel_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_mouse_event_t*, int32, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_touch_event_t* event)*
		.method public hidebysig void SendTouchEvent(valuetype CefNet.CApi.cef_touch_event_t* @event)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_touch_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_touch_event_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int setFocus)*
		.method public hidebysig void SendFocusEvent(int32 setFocus)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_focus_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void SendCaptureLostEvent()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::send_capture_lost_event
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void NotifyMoveOrResizeStarted()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::notify_move_or_resize_started
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 GetWindowlessFrameRate()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_windowless_frame_rate
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int frame_rate)*
		.method public hidebysig void SetWindowlessFrameRate(int32 frame_rate)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_windowless_frame_rate
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* text, size_t underlinesCount, const cef_composition_underline_t* underlines, const cef_range_t* replacement_range, const cef_range_t* selection_range)*
		.method public hidebysig void ImeSetComposition(valuetype CefNet.CApi.cef_string_t* text, native uint underlinesCount, valuetype CefNet.CApi.cef_composition_underline_t* underlines, valuetype CefNet.CApi.cef_range_t* replacement_range, valuetype CefNet.CApi.cef_range_t* selection_range)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::ime_set_composition
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*, native uint, valuetype CefNet.CApi.cef_composition_underline_t*, valuetype CefNet.CApi.cef_range_t*, valuetype CefNet.CApi.cef_range_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const cef_string_t* text, const cef_range_t* replacement_range, int relative_cursor_pos)*
		.method public hidebysig void ImeCommitText(valuetype CefNet.CApi.cef_string_t* text, valuetype CefNet.CApi.cef_range_t* replacement_range, int32 relative_cursor_pos)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::ime_commit_text
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_range_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int keep_selection)*
		.method public hidebysig void ImeFinishComposingText(int32 keep_selection)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::ime_finish_composing_text
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void ImeCancelComposition()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::ime_cancel_composition
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, _cef_drag_data_t* drag_data, const const _cef_mouse_event_t* event, cef_drag_operations_mask_t allowed_ops)*
		.method public hidebysig void DragTargetDragEnter(valuetype CefNet.CApi.cef_drag_data_t* drag_data, valuetype CefNet.CApi.cef_mouse_event_t* @event, valuetype CefNet.CefDragOperationsMask allowed_ops)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::drag_target_drag_enter
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_drag_data_t*, valuetype CefNet.CApi.cef_mouse_event_t*, valuetype CefNet.CefDragOperationsMask)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_mouse_event_t* event, cef_drag_operations_mask_t allowed_ops)*
		.method public hidebysig void DragTargetDragOver(valuetype CefNet.CApi.cef_mouse_event_t* @event, valuetype CefNet.CefDragOperationsMask allowed_ops)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::drag_target_drag_over
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_mouse_event_t*, valuetype CefNet.CefDragOperationsMask)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void DragTargetDragLeave()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::drag_target_drag_leave
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, const const _cef_mouse_event_t* event)*
		.method public hidebysig void DragTargetDrop(valuetype CefNet.CApi.cef_mouse_event_t* @event)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::drag_target_drop
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CApi.cef_mouse_event_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int x, int y, cef_drag_operations_mask_t op)*
		.method public hidebysig void DragSourceEndedAt(int32 x, int32 y, valuetype CefNet.CefDragOperationsMask op)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::drag_source_ended_at
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32, int32, valuetype CefNet.CefDragOperationsMask)
			ret
		}

		// void (*)(_cef_browser_host_t* self)*
		.method public hidebysig void DragSourceSystemDragEnded()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::drag_source_system_drag_ended
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// _cef_navigation_entry_t* (*)(_cef_browser_host_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_navigation_entry_t* GetVisibleNavigationEntry()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_visible_navigation_entry
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_navigation_entry_t*(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, cef_state_t accessibility_state)*
		.method public hidebysig void SetAccessibilityState(valuetype CefNet.CefState accessibility_state)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_accessibility_state
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, valuetype CefNet.CefState)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int enabled, const cef_size_t* min_size, const cef_size_t* max_size)*
		.method public hidebysig void SetAutoResizeEnabled(int32 enabled, valuetype CefNet.CApi.cef_size_t* min_size, valuetype CefNet.CApi.cef_size_t* max_size)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_auto_resize_enabled
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32, valuetype CefNet.CApi.cef_size_t*, valuetype CefNet.CApi.cef_size_t*)
			ret
		}

		// _cef_extension_t* (*)(_cef_browser_host_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_extension_t* GetExtension()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::get_extension
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_extension_t*(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 IsBackgroundHost()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::is_background_host
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}

		// void (*)(_cef_browser_host_t* self, int mute)*
		.method public hidebysig void SetAudioMuted(int32 mute)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::set_audio_muted
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_browser_host_t*, int32)
			ret
		}

		// int (*)(_cef_browser_host_t* self)*
		.method public hidebysig int32 IsAudioMuted()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_browser_host_t::is_audio_muted
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_browser_host_t*)
			ret
		}
	}
}

