// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_v8_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_v8context_t
	{
		// _cef_task_runner_t* (*)(_cef_v8context_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_task_runner_t* GetTaskRunner()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::get_task_runner
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_task_runner_t*(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// int (*)(_cef_v8context_t* self)*
		.method public hidebysig int32 IsValid()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::is_valid
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// _cef_browser_t* (*)(_cef_v8context_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_browser_t* GetBrowser()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::get_browser
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_browser_t*(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// _cef_frame_t* (*)(_cef_v8context_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_frame_t* GetFrame()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::get_frame
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_frame_t*(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// _cef_v8value_t* (*)(_cef_v8context_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_v8value_t* GetGlobal()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::get_global
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_v8value_t*(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// int (*)(_cef_v8context_t* self)*
		.method public hidebysig int32 Enter()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::enter
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// int (*)(_cef_v8context_t* self)*
		.method public hidebysig int32 Exit()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::exit
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// int (*)(_cef_v8context_t* self, _cef_v8context_t* that)*
		.method public hidebysig int32 IsSame(valuetype CefNet.CApi.cef_v8context_t* that)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::is_same
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_v8context_t*, valuetype CefNet.CApi.cef_v8context_t*)
			ret
		}

		// int (*)(_cef_v8context_t* self, const cef_string_t* code, const cef_string_t* script_url, int start_line, _cef_v8value_t** retval, _cef_v8exception_t** exception)*
		.method public hidebysig int32 Eval(valuetype CefNet.CApi.cef_string_t* code, valuetype CefNet.CApi.cef_string_t* script_url, int32 start_line, valuetype CefNet.CApi.cef_v8value_t** retval, valuetype CefNet.CApi.cef_v8exception_t** exception)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_v8context_t::eval
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_v8context_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, int32, valuetype CefNet.CApi.cef_v8value_t**, valuetype CefNet.CApi.cef_v8exception_t**)
			ret
		}
	}
}

