// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_zip_reader_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_zip_reader_t
	{
		// int (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int32 MoveToFirstFile()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::move_to_first_file
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// int (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int32 MoveToNextFile()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::move_to_next_file
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// int (*)(_cef_zip_reader_t* self, const cef_string_t* fileName, int caseSensitive)*
		.method public hidebysig int32 MoveToFile(valuetype CefNet.CApi.cef_string_t* fileName, int32 caseSensitive)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::move_to_file
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*, valuetype CefNet.CApi.cef_string_t*, int32)
			ret
		}

		// int (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int32 Close()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::close
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_zip_reader_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetFileName()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::get_file_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// int64 (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int64 GetFileSize()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::get_file_size
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int64(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// cef_time_t (*)(_cef_zip_reader_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_time_t GetFileLastModified()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::get_file_last_modified
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_time_t(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// int (*)(_cef_zip_reader_t* self, const cef_string_t* password)*
		.method public hidebysig int32 OpenFile(valuetype CefNet.CApi.cef_string_t* password)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::open_file
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// int (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int32 CloseFile()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::close_file
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// int (*)(_cef_zip_reader_t* self, void* buffer, size_t bufferSize)*
		.method public hidebysig int32 ReadFile(void* buffer, native uint bufferSize)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::read_file
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*, void*, native uint)
			ret
		}

		// int64 (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int64 Tell()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::tell
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int64(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}

		// int (*)(_cef_zip_reader_t* self)*
		.method public hidebysig int32 Eof()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_zip_reader_t::eof
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_zip_reader_t*)
			ret
		}
	}
}

