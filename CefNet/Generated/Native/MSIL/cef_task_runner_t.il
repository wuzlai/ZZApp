// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_task_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_task_runner_t
	{
		// int (*)(_cef_task_runner_t* self, _cef_task_runner_t* that)*
		.method public hidebysig int32 IsSame(valuetype CefNet.CApi.cef_task_runner_t* that)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_task_runner_t::is_same
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_task_runner_t*, valuetype CefNet.CApi.cef_task_runner_t*)
			ret
		}

		// int (*)(_cef_task_runner_t* self)*
		.method public hidebysig int32 BelongsToCurrentThread()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_task_runner_t::belongs_to_current_thread
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_task_runner_t*)
			ret
		}

		// int (*)(_cef_task_runner_t* self, cef_thread_id_t threadId)*
		.method public hidebysig int32 BelongsToThread(valuetype CefNet.CefThreadId threadId)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_task_runner_t::belongs_to_thread
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_task_runner_t*, valuetype CefNet.CefThreadId)
			ret
		}

		// int (*)(_cef_task_runner_t* self, _cef_task_t* task)*
		.method public hidebysig int32 PostTask(valuetype CefNet.CApi.cef_task_t* task)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_task_runner_t::post_task
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_task_runner_t*, valuetype CefNet.CApi.cef_task_t*)
			ret
		}

		// int (*)(_cef_task_runner_t* self, _cef_task_t* task, int64 delay_ms)*
		.method public hidebysig int32 PostDelayedTask(valuetype CefNet.CApi.cef_task_t* task, int64 delay_ms)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_task_runner_t::post_delayed_task
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_task_runner_t*, valuetype CefNet.CApi.cef_task_t*, int64)
			ret
		}
	}
}

