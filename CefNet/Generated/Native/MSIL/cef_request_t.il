// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_request_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_request_t
	{
		// int (*)(_cef_request_t* self)*
		.method public hidebysig int32 IsReadOnly()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::is_read_only
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetUrl()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_url
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// void (*)(_cef_request_t* self, const cef_string_t* url)*
		.method public hidebysig void SetUrl(valuetype CefNet.CApi.cef_string_t* url)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_url
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetMethod()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_method
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// void (*)(_cef_request_t* self, const cef_string_t* method)*
		.method public hidebysig void SetMethod(valuetype CefNet.CApi.cef_string_t* 'method')
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_method
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// void (*)(_cef_request_t* self, const cef_string_t* referrer_url, cef_referrer_policy_t policy)*
		.method public hidebysig void SetReferrer(valuetype CefNet.CApi.cef_string_t* referrer_url, valuetype CefNet.CefReferrerPolicy policy)
		{
			.maxstack 4
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_referrer
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CefReferrerPolicy)
			ret
		}

		// cef_string_userfree_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetReferrerUrl()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_referrer_url
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// cef_referrer_policy_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CefReferrerPolicy GetReferrerPolicy()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_referrer_policy
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefReferrerPolicy(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// _cef_post_data_t* (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_post_data_t* GetPostData()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_post_data
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_post_data_t*(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// void (*)(_cef_request_t* self, _cef_post_data_t* postData)*
		.method public hidebysig void SetPostData(valuetype CefNet.CApi.cef_post_data_t* postData)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_post_data
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_post_data_t*)
			ret
		}

		// void (*)(_cef_request_t* self, cef_string_multimap_t headerMap)*
		.method public hidebysig void GetHeaderMap(valuetype CefNet.CApi.cef_string_multimap_t headerMap)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_header_map
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_multimap_t)
			ret
		}

		// void (*)(_cef_request_t* self, cef_string_multimap_t headerMap)*
		.method public hidebysig void SetHeaderMap(valuetype CefNet.CApi.cef_string_multimap_t headerMap)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_header_map
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_multimap_t)
			ret
		}

		// cef_string_userfree_t (*)(_cef_request_t* self, const cef_string_t* name)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetHeaderByName(valuetype CefNet.CApi.cef_string_t* name)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_header_by_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// void (*)(_cef_request_t* self, const cef_string_t* name, const cef_string_t* value, int overwrite)*
		.method public hidebysig void SetHeaderByName(valuetype CefNet.CApi.cef_string_t* name, valuetype CefNet.CApi.cef_string_t* 'value', int32 overwrite)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_header_by_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, int32)
			ret
		}

		// void (*)(_cef_request_t* self, const cef_string_t* url, const cef_string_t* method, _cef_post_data_t* postData, cef_string_multimap_t headerMap)*
		.method public hidebysig void Set(valuetype CefNet.CApi.cef_string_t* url, valuetype CefNet.CApi.cef_string_t* 'method', valuetype CefNet.CApi.cef_post_data_t* postData, valuetype CefNet.CApi.cef_string_multimap_t headerMap)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_post_data_t*, valuetype CefNet.CApi.cef_string_multimap_t)
			ret
		}

		// int (*)(_cef_request_t* self)*
		.method public hidebysig int32 GetFlags()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_flags
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// void (*)(_cef_request_t* self, int flags)*
		.method public hidebysig void SetFlags(int32 'flags')
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_flags
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, int32)
			ret
		}

		// cef_string_userfree_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetFirstPartyForCookies()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_first_party_for_cookies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// void (*)(_cef_request_t* self, const cef_string_t* url)*
		.method public hidebysig void SetFirstPartyForCookies(valuetype CefNet.CApi.cef_string_t* url)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::set_first_party_for_cookies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// cef_resource_type_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CefResourceType GetResourceType()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_resource_type
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefResourceType(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// cef_transition_type_t (*)(_cef_request_t* self)*
		.method public hidebysig valuetype CefNet.CefTransitionType GetTransitionType()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_transition_type
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefTransitionType(valuetype CefNet.CApi.cef_request_t*)
			ret
		}

		// uint64 (*)(_cef_request_t* self)*
		.method public hidebysig uint64 GetIdentifier()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_t::get_identifier
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				uint64(valuetype CefNet.CApi.cef_request_t*)
			ret
		}
	}
}

