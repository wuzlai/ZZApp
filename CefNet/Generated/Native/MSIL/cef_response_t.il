// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_response_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_response_t
	{
		// int (*)(_cef_response_t* self)*
		.method public hidebysig int32 IsReadOnly()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::is_read_only
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// cef_errorcode_t (*)(_cef_response_t* self)*
		.method public hidebysig valuetype CefNet.CefErrorCode GetError()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_error
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CefErrorCode(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// void (*)(_cef_response_t* self, cef_errorcode_t error)*
		.method public hidebysig void SetError(valuetype CefNet.CefErrorCode 'error')
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_error
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CefErrorCode)
			ret
		}

		// int (*)(_cef_response_t* self)*
		.method public hidebysig int32 GetStatus()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_status
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// void (*)(_cef_response_t* self, int status)*
		.method public hidebysig void SetStatus(int32 status)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_status
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, int32)
			ret
		}

		// cef_string_userfree_t (*)(_cef_response_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetStatusText()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_status_text
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// void (*)(_cef_response_t* self, const cef_string_t* statusText)*
		.method public hidebysig void SetStatusText(valuetype CefNet.CApi.cef_string_t* statusText)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_status_text
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_response_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetMimeType()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_mime_type
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// void (*)(_cef_response_t* self, const cef_string_t* mimeType)*
		.method public hidebysig void SetMimeType(valuetype CefNet.CApi.cef_string_t* mimeType)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_mime_type
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_response_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetCharset()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_charset
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// void (*)(_cef_response_t* self, const cef_string_t* charset)*
		.method public hidebysig void SetCharset(valuetype CefNet.CApi.cef_string_t* charset)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_charset
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// cef_string_userfree_t (*)(_cef_response_t* self, const cef_string_t* name)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetHeaderByName(valuetype CefNet.CApi.cef_string_t* name)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_header_by_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}

		// void (*)(_cef_response_t* self, const cef_string_t* name, const cef_string_t* value, int overwrite)*
		.method public hidebysig void SetHeaderByName(valuetype CefNet.CApi.cef_string_t* name, valuetype CefNet.CApi.cef_string_t* 'value', int32 overwrite)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_header_by_name
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, int32)
			ret
		}

		// void (*)(_cef_response_t* self, cef_string_multimap_t headerMap)*
		.method public hidebysig void GetHeaderMap(valuetype CefNet.CApi.cef_string_multimap_t headerMap)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_header_map
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_multimap_t)
			ret
		}

		// void (*)(_cef_response_t* self, cef_string_multimap_t headerMap)*
		.method public hidebysig void SetHeaderMap(valuetype CefNet.CApi.cef_string_multimap_t headerMap)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_header_map
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_multimap_t)
			ret
		}

		// cef_string_userfree_t (*)(_cef_response_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_string_userfree_t GetUrl()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::get_url
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_string_userfree_t(valuetype CefNet.CApi.cef_response_t*)
			ret
		}

		// void (*)(_cef_response_t* self, const cef_string_t* url)*
		.method public hidebysig void SetUrl(valuetype CefNet.CApi.cef_string_t* url)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_response_t::set_url
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_response_t*, valuetype CefNet.CApi.cef_string_t*)
			ret
		}
	}
}

