// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_request_context_handler_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_request_context_handler_t
	{
		// void (*)(_cef_request_context_handler_t* self, _cef_request_context_t* request_context)*
		.method public hidebysig void OnRequestContextInitialized(valuetype CefNet.CApi.cef_request_context_t* request_context)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_context_handler_t::on_request_context_initialized
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_request_context_handler_t*, valuetype CefNet.CApi.cef_request_context_t*)
			ret
		}

		// int (*)(_cef_request_context_handler_t* self, const cef_string_t* mime_type, const cef_string_t* plugin_url, int is_main_frame, const cef_string_t* top_origin_url, _cef_web_plugin_info_t* plugin_info, cef_plugin_policy_t* plugin_policy)*
		.method public hidebysig int32 OnBeforePluginLoad(valuetype CefNet.CApi.cef_string_t* mime_type, valuetype CefNet.CApi.cef_string_t* plugin_url, int32 is_main_frame, valuetype CefNet.CApi.cef_string_t* top_origin_url, valuetype CefNet.CApi.cef_web_plugin_info_t* plugin_info, valuetype CefNet.CefPluginPolicy* plugin_policy)
		{
			.maxstack 8
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_context_handler_t::on_before_plugin_load
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_request_context_handler_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, int32, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_web_plugin_info_t*, valuetype CefNet.CefPluginPolicy*)
			ret
		}

		// _cef_resource_request_handler_t* (*)(_cef_request_context_handler_t* self, _cef_browser_t* browser, _cef_frame_t* frame, _cef_request_t* request, int is_navigation, int is_download, const cef_string_t* request_initiator, int* disable_default_handling)*
		.method public hidebysig valuetype CefNet.CApi.cef_resource_request_handler_t* GetResourceRequestHandler(valuetype CefNet.CApi.cef_browser_t* browser, valuetype CefNet.CApi.cef_frame_t* frame, valuetype CefNet.CApi.cef_request_t* 'request', int32 is_navigation, int32 is_download, valuetype CefNet.CApi.cef_string_t* request_initiator, int32* disable_default_handling)
		{
			.maxstack 9
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.s 7
			ldarg.0
			ldfld void* CefNet.CApi.cef_request_context_handler_t::get_resource_request_handler
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_resource_request_handler_t*(valuetype CefNet.CApi.cef_request_context_handler_t*, valuetype CefNet.CApi.cef_browser_t*, valuetype CefNet.CApi.cef_frame_t*, valuetype CefNet.CApi.cef_request_t*, int32, int32, valuetype CefNet.CApi.cef_string_t*, int32*)
			ret
		}
	}
}

