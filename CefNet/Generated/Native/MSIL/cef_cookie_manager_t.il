// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_cookie_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_cookie_manager_t
	{
		// void (*)(_cef_cookie_manager_t* self, cef_string_list_t schemes, int include_defaults, _cef_completion_callback_t* callback)*
		.method public hidebysig void SetSupportedSchemes(valuetype CefNet.CApi.cef_string_list_t schemes, int32 include_defaults, valuetype CefNet.CApi.cef_completion_callback_t* callback)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_cookie_manager_t::set_supported_schemes
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_cookie_manager_t*, valuetype CefNet.CApi.cef_string_list_t, int32, valuetype CefNet.CApi.cef_completion_callback_t*)
			ret
		}

		// int (*)(_cef_cookie_manager_t* self, _cef_cookie_visitor_t* visitor)*
		.method public hidebysig int32 VisitAllCookies(valuetype CefNet.CApi.cef_cookie_visitor_t* visitor)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_cookie_manager_t::visit_all_cookies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_cookie_manager_t*, valuetype CefNet.CApi.cef_cookie_visitor_t*)
			ret
		}

		// int (*)(_cef_cookie_manager_t* self, const cef_string_t* url, int includeHttpOnly, _cef_cookie_visitor_t* visitor)*
		.method public hidebysig int32 VisitUrlCookies(valuetype CefNet.CApi.cef_string_t* url, int32 includeHttpOnly, valuetype CefNet.CApi.cef_cookie_visitor_t* visitor)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_cookie_manager_t::visit_url_cookies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_cookie_manager_t*, valuetype CefNet.CApi.cef_string_t*, int32, valuetype CefNet.CApi.cef_cookie_visitor_t*)
			ret
		}

		// int (*)(_cef_cookie_manager_t* self, const cef_string_t* url, const const _cef_cookie_t* cookie, _cef_set_cookie_callback_t* callback)*
		.method public hidebysig int32 SetCookie(valuetype CefNet.CApi.cef_string_t* url, valuetype CefNet.CApi.cef_cookie_t* cookie, valuetype CefNet.CApi.cef_set_cookie_callback_t* callback)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_cookie_manager_t::set_cookie
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_cookie_manager_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_cookie_t*, valuetype CefNet.CApi.cef_set_cookie_callback_t*)
			ret
		}

		// int (*)(_cef_cookie_manager_t* self, const cef_string_t* url, const cef_string_t* cookie_name, _cef_delete_cookies_callback_t* callback)*
		.method public hidebysig int32 DeleteCookies(valuetype CefNet.CApi.cef_string_t* url, valuetype CefNet.CApi.cef_string_t* cookie_name, valuetype CefNet.CApi.cef_delete_cookies_callback_t* callback)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_cookie_manager_t::delete_cookies
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_cookie_manager_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_string_t*, valuetype CefNet.CApi.cef_delete_cookies_callback_t*)
			ret
		}

		// int (*)(_cef_cookie_manager_t* self, _cef_completion_callback_t* callback)*
		.method public hidebysig int32 FlushStore(valuetype CefNet.CApi.cef_completion_callback_t* callback)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_cookie_manager_t::flush_store
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_cookie_manager_t*, valuetype CefNet.CApi.cef_completion_callback_t*)
			ret
		}
	}
}

