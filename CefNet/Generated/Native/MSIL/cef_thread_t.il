// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_thread_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_thread_t
	{
		// _cef_task_runner_t* (*)(_cef_thread_t* self)*
		.method public hidebysig valuetype CefNet.CApi.cef_task_runner_t* GetTaskRunner()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_thread_t::get_task_runner
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_task_runner_t*(valuetype CefNet.CApi.cef_thread_t*)
			ret
		}

		// cef_platform_thread_id_t (*)(_cef_thread_t* self)*
		.method public hidebysig uint32 GetPlatformThreadId()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_thread_t::get_platform_thread_id
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				uint32(valuetype CefNet.CApi.cef_thread_t*)
			ret
		}

		// void (*)(_cef_thread_t* self)*
		.method public hidebysig void Stop()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_thread_t::stop
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				void(valuetype CefNet.CApi.cef_thread_t*)
			ret
		}

		// int (*)(_cef_thread_t* self)*
		.method public hidebysig int32 IsRunning()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_thread_t::is_running
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_thread_t*)
			ret
		}
	}
}

