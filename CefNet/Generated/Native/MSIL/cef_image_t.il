// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: include/capi/cef_image_capi.h
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------


.namespace CefNet.CApi
{
	.class public cef_image_t
	{
		// int (*)(_cef_image_t* self)*
		.method public hidebysig int32 IsEmpty()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::is_empty
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*)
			ret
		}

		// int (*)(_cef_image_t* self, _cef_image_t* that)*
		.method public hidebysig int32 IsSame(valuetype CefNet.CApi.cef_image_t* that)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::is_same
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, valuetype CefNet.CApi.cef_image_t*)
			ret
		}

		// int (*)(_cef_image_t* self, float scale_factor, int pixel_width, int pixel_height, cef_color_type_t color_type, cef_alpha_type_t alpha_type, const void* pixel_data, size_t pixel_data_size)*
		.method public hidebysig int32 AddBitmap(float32 scale_factor, int32 pixel_width, int32 pixel_height, valuetype CefNet.CefColorType color_type, valuetype CefNet.CefAlphaType alpha_type, void* pixel_data, native uint pixel_data_size)
		{
			.maxstack 9
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.s 6
			ldarg.s 7
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::add_bitmap
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, float32, int32, int32, valuetype CefNet.CefColorType, valuetype CefNet.CefAlphaType, void*, native uint)
			ret
		}

		// int (*)(_cef_image_t* self, float scale_factor, const void* png_data, size_t png_data_size)*
		.method public hidebysig int32 AddPng(float32 scale_factor, void* png_data, native uint png_data_size)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::add_png
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, float32, void*, native uint)
			ret
		}

		// int (*)(_cef_image_t* self, float scale_factor, const void* jpeg_data, size_t jpeg_data_size)*
		.method public hidebysig int32 AddJpeg(float32 scale_factor, void* jpeg_data, native uint jpeg_data_size)
		{
			.maxstack 5
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::add_jpeg
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, float32, void*, native uint)
			ret
		}

		// size_t (*)(_cef_image_t* self)*
		.method public hidebysig native uint GetWidth()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::get_width
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native uint(valuetype CefNet.CApi.cef_image_t*)
			ret
		}

		// size_t (*)(_cef_image_t* self)*
		.method public hidebysig native uint GetHeight()
		{
			.maxstack 2
			ldarg.0
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::get_height
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				native uint(valuetype CefNet.CApi.cef_image_t*)
			ret
		}

		// int (*)(_cef_image_t* self, float scale_factor)*
		.method public hidebysig int32 HasRepresentation(float32 scale_factor)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::has_representation
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, float32)
			ret
		}

		// int (*)(_cef_image_t* self, float scale_factor)*
		.method public hidebysig int32 RemoveRepresentation(float32 scale_factor)
		{
			.maxstack 3
			ldarg.0
			ldarg.1
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::remove_representation
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, float32)
			ret
		}

		// int (*)(_cef_image_t* self, float scale_factor, float* actual_scale_factor, int* pixel_width, int* pixel_height)*
		.method public hidebysig int32 GetRepresentationInfo(float32 scale_factor, float32* actual_scale_factor, int32* pixel_width, int32* pixel_height)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::get_representation_info
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				int32(valuetype CefNet.CApi.cef_image_t*, float32, float32*, int32*, int32*)
			ret
		}

		// _cef_binary_value_t* (*)(_cef_image_t* self, float scale_factor, cef_color_type_t color_type, cef_alpha_type_t alpha_type, int* pixel_width, int* pixel_height)*
		.method public hidebysig valuetype CefNet.CApi.cef_binary_value_t* GetAsBitmap(float32 scale_factor, valuetype CefNet.CefColorType color_type, valuetype CefNet.CefAlphaType alpha_type, int32* pixel_width, int32* pixel_height)
		{
			.maxstack 7
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.s 5
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::get_as_bitmap
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_binary_value_t*(valuetype CefNet.CApi.cef_image_t*, float32, valuetype CefNet.CefColorType, valuetype CefNet.CefAlphaType, int32*, int32*)
			ret
		}

		// _cef_binary_value_t* (*)(_cef_image_t* self, float scale_factor, int with_transparency, int* pixel_width, int* pixel_height)*
		.method public hidebysig valuetype CefNet.CApi.cef_binary_value_t* GetAsPng(float32 scale_factor, int32 with_transparency, int32* pixel_width, int32* pixel_height)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::get_as_png
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_binary_value_t*(valuetype CefNet.CApi.cef_image_t*, float32, int32, int32*, int32*)
			ret
		}

		// _cef_binary_value_t* (*)(_cef_image_t* self, float scale_factor, int quality, int* pixel_width, int* pixel_height)*
		.method public hidebysig valuetype CefNet.CApi.cef_binary_value_t* GetAsJpeg(float32 scale_factor, int32 quality, int32* pixel_width, int32* pixel_height)
		{
			.maxstack 6
			ldarg.0
			ldarg.1
			ldarg.2
			ldarg.3
			ldarg.s 4
			ldarg.0
			ldfld void* CefNet.CApi.cef_image_t::get_as_jpeg
			calli explicit unmanaged
#ifdef WINDOWS
				stdcall
#else
				cdecl
#endif
				valuetype CefNet.CApi.cef_binary_value_t*(valuetype CefNet.CApi.cef_image_t*, float32, int32, int32*, int32*)
			ret
		}
	}
}

